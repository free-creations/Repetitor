/*
 *  Copyright 2011 harald.
 * 
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  under the License.
 */

/**************************************************************************
 * @ToDo this needs to be intensively optimised.
 * see also:
 * http://profiler.netbeans.org/
 */
package de.free_creations.audioconfig;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Set;
import java.util.TreeSet;
import java.util.prefs.Preferences;
import javax.swing.ImageIcon;
import javax.swing.Timer;
import org.openide.util.NbPreferences;
import rtaudio4java.AudioSystem;
import rtaudio4java.AudioSystemFactory;
import rtaudio4java.DeviceInfo;
import rtaudio4java.RtError;

final class AudioSettingsPanel extends javax.swing.JPanel {

  private boolean configOK = false;
  private volatile int lockCount = 0;
  private final AudioSettingsOptionsPanelController controller;
  private AudioSystem rtAudioInstance = null;
  private PlaySine playSine = null;
  private String initialMessage = null;
  private final ImageIcon image_base;
  private final ImageIcon[] image_animated;
  private final Object timerInstallLock = new Object();
  private Timer updateTimer = null;

  AudioSettingsPanel(AudioSettingsOptionsPanelController controller) {
    this.controller = controller;
    initComponents();

    //Load the icons we'll need for the animated button.
    image_base = new ImageIcon(getClass().getResource("/de/free_creations/audioconfig/speaker-off.png"));
    image_animated = new ImageIcon[3];
    image_animated[0] = new ImageIcon(getClass().getResource("/de/free_creations/audioconfig/speaker-0.png"));
    image_animated[1] = new ImageIcon(getClass().getResource("/de/free_creations/audioconfig/speaker-1.png"));
    image_animated[2] = new ImageIcon(getClass().getResource("/de/free_creations/audioconfig/speaker-2.png"));

    testLabel.setIcon(image_base);
  }

  public void setMessage(String s) {
    initialMessage = s;
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        systemComboBox = new javax.swing.JComboBox<String>();
        jLabel2 = new javax.swing.JLabel();
        outputDeviceComboBox = new javax.swing.JComboBox<String>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        firstChannelComboBox = new javax.swing.JComboBox<String>();
        numberOfChannelsComboBox = new javax.swing.JComboBox<String>();
        sampleRateComboBox = new javax.swing.JComboBox<String>();
        bufferSizeComboBox = new javax.swing.JComboBox<String>();
        errorMessage = new javax.swing.JLabel();
        testLabel = new javax.swing.JLabel();
        testStartButton = new javax.swing.JButton();
        testStopButton = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(AudioSettingsPanel.class, "AudioSettingsPanel.jLabel1.text")); // NOI18N

        systemComboBox.setFont(new java.awt.Font("Bitstream Vera Sans", 1, 13)); // NOI18N
        systemComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Direct Sound", "ASIO" }));
        systemComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                systemComboBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(AudioSettingsPanel.class, "AudioSettingsPanel.jLabel2.text")); // NOI18N

        outputDeviceComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "DMX 6fire Wave", "USB Device", "Item 2", "Item 3", "Item 4" }));
        outputDeviceComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputDeviceComboBoxActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(AudioSettingsPanel.class, "AudioSettingsPanel.jLabel3.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(AudioSettingsPanel.class, "AudioSettingsPanel.jLabel4.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(AudioSettingsPanel.class, "AudioSettingsPanel.jLabel5.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(AudioSettingsPanel.class, "AudioSettingsPanel.jLabel6.text")); // NOI18N

        firstChannelComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        firstChannelComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstChannelComboBoxActionPerformed(evt);
            }
        });

        numberOfChannelsComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        sampleRateComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        bufferSizeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        errorMessage.setForeground(new java.awt.Color(190, 0, 0));
        errorMessage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(errorMessage, org.openide.util.NbBundle.getMessage(AudioSettingsPanel.class, "AudioSettingsPanel.errorMessage.text")); // NOI18N

        testLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/free_creations/audioconfig/speaker-off.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(testLabel, org.openide.util.NbBundle.getMessage(AudioSettingsPanel.class, "AudioSettingsPanel.testLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(testStartButton, org.openide.util.NbBundle.getMessage(AudioSettingsPanel.class, "AudioSettingsPanel.testStartButton.text")); // NOI18N
        testStartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testStartButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(testStopButton, org.openide.util.NbBundle.getMessage(AudioSettingsPanel.class, "AudioSettingsPanel.testStopButton.text")); // NOI18N
        testStopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testStopButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(errorMessage, javax.swing.GroupLayout.DEFAULT_SIZE, 660, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(testLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(firstChannelComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(sampleRateComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(bufferSizeComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(numberOfChannelsComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(systemComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(outputDeviceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(testStartButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(testStopButton))))
                    .addComponent(jLabel1))
                .addContainerGap(312, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(systemComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(outputDeviceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(firstChannelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numberOfChannelsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sampleRateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bufferSizeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(testLabel)
                    .addComponent(testStartButton)
                    .addComponent(testStopButton))
                .addGap(22, 22, 22)
                .addComponent(errorMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

  private void systemComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_systemComboBoxActionPerformed
    if (lockCount != 0) {
      return;
    }
    lockCount++;
    AssocModel systemModel = (AssocModel) systemComboBox.getModel();
    int systemNumber = systemModel.getSelectedNumber();
    rtAudioInstance = AudioSystemFactory.getRtAudioInstance(systemNumber);
    AssocModel outputDeviceModel = initOutputDeviceModel(rtAudioInstance);

    if (outputDeviceModel.getSize() > 0) {
      int outputDeviceNumber = outputDeviceModel.getSelectedNumber();
      DeviceInfo info = null;
      try {
        info = rtAudioInstance.getDeviceInfo(outputDeviceNumber).get();
      } catch (Exception ex) {
        clearAttributesModels();
        errorMessage.setText(ex.getLocalizedMessage());
        lockCount--;
        return;
      }
      initAttributesModels(info);
    } else {
      clearAttributesModels();
    }
    lockCount--;
  }//GEN-LAST:event_systemComboBoxActionPerformed

  private void outputDeviceComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputDeviceComboBoxActionPerformed
    if (lockCount != 0) {
      return;
    }
    lockCount++;
    if (rtAudioInstance == null) {
      errorMessage.setText("Audio System not available.");
      clearAttributesModels();
      lockCount--;
      return;
    } else {
      errorMessage.setText("");
    }
    AssocModel outputDeviceModel = (AssocModel) outputDeviceComboBox.getModel();
    int deviceIdx = outputDeviceModel.getSelectedNumber();
    DeviceInfo info = null;
    try {
      info = rtAudioInstance.getDeviceInfo(deviceIdx).get();
    } catch (Exception ex) {
      errorMessage.setText(ex.getLocalizedMessage());
      lockCount--;
      return;
    }
    initAttributesModels(info);
    lockCount--;
  }//GEN-LAST:event_outputDeviceComboBoxActionPerformed

  private void firstChannelComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstChannelComboBoxActionPerformed
    if (lockCount != 0) {
      return;
    }
    lockCount++;
    if (rtAudioInstance == null) {
      errorMessage.setText("Audio System not available.");
      clearAttributesModels();
      lockCount--;
      return;
    } else {
      errorMessage.setText("");
    }
    AssocModel firstChannelModel = (AssocModel) firstChannelComboBox.getModel();
    int firstChannelIdx = firstChannelModel.getSelectedNumber();
    int maxChannels = firstChannelModel.getSize() - firstChannelIdx;

    initNumberOfChannelsModels(maxChannels);
    lockCount--;
  }//GEN-LAST:event_firstChannelComboBoxActionPerformed

  private void testStartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testStartButtonActionPerformed
    if (!configOK) {
      return;
    }
    if (lockCount != 0) {
      return;
    }
    startTesting();
  }//GEN-LAST:event_testStartButtonActionPerformed

  private void testStopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testStopButtonActionPerformed
    stopPlaying();
  }//GEN-LAST:event_testStopButtonActionPerformed

  void load() {
    lockCount++;
    errorMessage.setText("");
    AssocModel systemModel = initSystemModel();

    String storedSystemDescription = Audioconfig.getSystemDescription();
    int storedSystemNumber = Audioconfig.getSystemNumber();

    try {

      if (storedSystemDescription.equals(systemModel.numberToDescription(storedSystemNumber))) {
        rtAudioInstance = AudioSystemFactory.getRtAudioInstance(storedSystemNumber);
        systemModel.setSelectedNumber(storedSystemNumber);
        loadDevices();
      } else {
        rtAudioInstance = AudioSystemFactory.getRtAudioInstance();
        int systemNumber = rtAudioInstance.getCurrentApi();
        systemModel.setSelectedNumber(systemNumber);
        loadDevices();
      }
    } catch (Throwable ex) {
      errorMessage.setText(ex.getLocalizedMessage());
    }
    if (initialMessage != null) {
      errorMessage.setText(initialMessage);
      initialMessage = null;
    }
    lockCount--;
  }

  void store() {
    if (!configOK) {
      return;
    }
    Preferences prefs = NbPreferences.forModule(AudioSettingsPanel.class);

    AssocModel systemModel = (AssocModel) systemComboBox.getModel();
    Audioconfig.putSystemDescription(systemModel.getSelectedDescription());
    Audioconfig.putSystemNumber(systemModel.getSelectedNumber());

    AssocModel outputDeviceModel = (AssocModel) outputDeviceComboBox.getModel();
    Audioconfig.putOutputDeviceDescription(outputDeviceModel.getSelectedDescription());
    Audioconfig.putOutputDeviceNumber(outputDeviceModel.getSelectedNumber());

    AssocModel firstChannelModel = (AssocModel) firstChannelComboBox.getModel();
    Audioconfig.putFirstChannel(firstChannelModel.getSelectedNumber());

    AssocModel numberOfChannelsModel = (AssocModel) numberOfChannelsComboBox.getModel();
    Audioconfig.putNumberOfChannels(numberOfChannelsModel.getSelectedNumber());

    AssocModel sampleRateModel = (AssocModel) sampleRateComboBox.getModel();
    Audioconfig.putSampleRate(sampleRateModel.getSelectedNumber());

    AssocModel BufferSizeModel = (AssocModel) bufferSizeComboBox.getModel();
    Audioconfig.putBufferSize(BufferSizeModel.getSelectedNumber());

  }

  boolean valid() {
    // TODO check whether form is consistent and complete
    return true;
  }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> bufferSizeComboBox;
    private javax.swing.JLabel errorMessage;
    private javax.swing.JComboBox<String> firstChannelComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JComboBox<String> numberOfChannelsComboBox;
    private javax.swing.JComboBox<String> outputDeviceComboBox;
    private javax.swing.JComboBox<String> sampleRateComboBox;
    private javax.swing.JComboBox<String> systemComboBox;
    private javax.swing.JLabel testLabel;
    private javax.swing.JButton testStartButton;
    private javax.swing.JButton testStopButton;
    // End of variables declaration//GEN-END:variables

  private AssocModel initSystemModel() {
    lockCount++;
    AssocModel audioSystemModel = new AssocModel();
    Set<Integer> compiledApis = AudioSystemFactory.getCompiledApi();
    for (int api : compiledApis) {
      audioSystemModel.addPair(api, AudioSystemFactory.apiTypeToString(api));
    }
    systemComboBox.setModel(audioSystemModel);
    lockCount--;
    return audioSystemModel;
  }

  private void loadDevices() {
    lockCount++;
    if (rtAudioInstance == null) {
      errorMessage.setText("Audio System not available.");
      lockCount--;
      return;
    } else {
      errorMessage.setText("");
    }
    AssocModel outputDeviceModel = initOutputDeviceModel(rtAudioInstance);
    if (outputDeviceModel.getSize() == 0) {
      lockCount--;
      return;
    }

    String outputDeviceDescription = Audioconfig.getOutputDeviceDescription();
    int outputDeviceNumber = Audioconfig.getOutputDeviceNumber();

    try {

      if (outputDeviceDescription.equals(outputDeviceModel.numberToDescription(outputDeviceNumber))) {
        DeviceInfo info = rtAudioInstance.getDeviceInfo(outputDeviceNumber).get();
        outputDeviceModel.setSelectedNumber(outputDeviceNumber);
        loadAttributes(info);
      } else {
        if (outputDeviceModel.containsDescription(outputDeviceDescription)) {
          outputDeviceModel.setSelectedDescription(outputDeviceDescription);
        }
        outputDeviceNumber = outputDeviceModel.getSelectedNumber();
        DeviceInfo info = rtAudioInstance.getDeviceInfo(outputDeviceNumber).get();
        loadAttributes(info);
      }
    } catch (Throwable ex) {
      errorMessage.setText(ex.getLocalizedMessage());
    }

    lockCount--;

  }

  private AssocModel initOutputDeviceModel(AudioSystem rtAudio) {
    lockCount++;
    errorMessage.setText("");
    AssocModel outputDeviceModel = new AssocModel();
    int deviceCount = rtAudio.getDeviceCount();
    int defaultOutput = -1;

    outputDeviceComboBox.setModel(outputDeviceModel);
    for (int i = 0; i < deviceCount; i++) {
      try {
        DeviceInfo info = rtAudio.getDeviceInfo(i).get();
        int outChannelCount = info.getOutputChannels();
        if (outChannelCount > 0) {
          outputDeviceModel.addPair(i, info.getName());
          if (info.isDefaultOutput()) {
            defaultOutput = i;
          }
        }
      } catch (Exception ex) {
        errorMessage.setText(ex.getLocalizedMessage());
        configOK = false;
      }
    }
    if (defaultOutput != -1) {
      outputDeviceModel.setSelectedNumber(defaultOutput);
    }

    outputDeviceComboBox.setModel(outputDeviceModel);
    if (outputDeviceModel.getSize() == 0) {
      errorMessage.setText("There are no output devices.\n"
              + errorMessage.getText());
      clearAttributesModels();
      configOK = false;
    }
    lockCount--;
    return outputDeviceModel;
  }

  private void loadAttributes(DeviceInfo info) {
    lockCount++;
    initAttributesModels(info);

    AssocModel firstChannelModel = (AssocModel) firstChannelComboBox.getModel();
    firstChannelModel.setSelectedNumber(Audioconfig.getFirstChannel());

    AssocModel numberOfChannelsModel = (AssocModel) numberOfChannelsComboBox.getModel();
    numberOfChannelsModel.setSelectedNumber(Audioconfig.getNumberOfChannels());

    AssocModel sampleRateModel = (AssocModel) sampleRateComboBox.getModel();
    sampleRateModel.setSelectedNumber(Audioconfig.getSampleRate());

    AssocModel BufferSizeModel = (AssocModel) bufferSizeComboBox.getModel();
    BufferSizeModel.setSelectedNumber(Audioconfig.getBufferSize());

    lockCount--;

  }

  private void initAttributesModels(DeviceInfo info) {
    lockCount++;
    if (info == null) {
      errorMessage.setText("Audio System not available.");
      sampleRateComboBox.setModel(null);
      firstChannelComboBox.setModel(null);
      lockCount--;
      return;
    } else {
      errorMessage.setText("");
    }
    AssocModel sampleRateModel = new AssocModel();
    //we use a tree-set to have them sorted.
    TreeSet<Integer> sampleRates = new TreeSet<Integer>(info.getSampleRates());
    for (int sampleRate : sampleRates) {
      sampleRateModel.addPair(sampleRate, "" + sampleRate);
    }
    sampleRateModel.setSelectedNumber(44100);
    sampleRateComboBox.setModel(sampleRateModel);

    AssocModel firstChannelModel = new AssocModel();
    for (int channel = 0; channel < info.getOutputChannels(); channel++) {
      firstChannelModel.addPair(channel, "" + channel);
    }
    firstChannelModel.setSelectedNumber(0);
    firstChannelComboBox.setModel(firstChannelModel);
    initNumberOfChannelsModels(info.getOutputChannels());

    AssocModel bufferSizeModel = new AssocModel();
    if (rtAudioInstance.getCurrentApi() == AudioSystemFactory.APITYPE_UNIX_JACK) {
      bufferSizeModel.addPair(1024, "n.a.");
    } else {
      bufferSizeModel.addPair(4096, "4096");
      bufferSizeModel.addPair(2048, "2048");
      bufferSizeModel.addPair(1024, "1024");
      bufferSizeModel.addPair(512, "512");
      bufferSizeModel.addPair(256, "256");
      bufferSizeModel.addPair(128, "128");
    }
    bufferSizeComboBox.setModel(bufferSizeModel);

    if (info.isProbed()) {
      testStartButton.setEnabled(true);
      configOK = true;
    }
    lockCount--;
  }

  private void clearAttributesModels() {
    lockCount++;

    sampleRateComboBox.setModel(new AssocModel());
    firstChannelComboBox.setModel(new AssocModel());
    bufferSizeComboBox.setModel(new AssocModel());
    numberOfChannelsComboBox.setModel(new AssocModel());
    testStartButton.setEnabled(false);
    configOK = false;
    lockCount--;
  }

  private void initNumberOfChannelsModels(int maxChannels) {
    lockCount++;

    AssocModel numberOfChannelsModel = new AssocModel();
    for (int numberOfChannels = 1; numberOfChannels <= maxChannels; numberOfChannels++) {
      numberOfChannelsModel.addPair(numberOfChannels, "" + numberOfChannels);
    }
    numberOfChannelsModel.setSelectedNumber(2);
    numberOfChannelsComboBox.setModel(numberOfChannelsModel);

    lockCount--;
  }

  private void startTesting() {
    synchronized (timerInstallLock) {

      AssocModel systemModel = (AssocModel) systemComboBox.getModel();
      int apiType = systemModel.getSelectedNumber();

      AssocModel outputDeviceModel = (AssocModel) outputDeviceComboBox.getModel();
      int device = outputDeviceModel.getSelectedNumber();
      AssocModel firstChannelModel = (AssocModel) firstChannelComboBox.getModel();
      int offset = firstChannelModel.getSelectedNumber();
      AssocModel numberOfChannelsModel = (AssocModel) numberOfChannelsComboBox.getModel();
      int nChannels = numberOfChannelsModel.getSelectedNumber();
      AssocModel sampleRateModel = (AssocModel) sampleRateComboBox.getModel();
      int sampleRate = sampleRateModel.getSelectedNumber();
      AssocModel BufferSizeModel = (AssocModel) bufferSizeComboBox.getModel();
      int bufferFrames = BufferSizeModel.getSelectedNumber();
      updateTimer = new Timer(300, labelUpdater);
      updateTimer.start();
      playSine = new PlaySine(apiType, device, offset, nChannels, bufferFrames, sampleRate);
    }
  }

  void stopPlaying() {

    synchronized (timerInstallLock) {
      if (updateTimer != null) {
        updateTimer.stop();
        updateTimer = null;
      }
      testLabel.setIcon(image_base);
      if (playSine != null) {
        playSine.stopPlaying();
        playSine = null;
      }

    }
  }
  private ActionListener labelUpdater = new ActionListener() {

    private int count = 0;

    @Override
    public void actionPerformed(ActionEvent evt) {
      if (playSine == null) {
        testLabel.setIcon(image_base);
        return;
      }
      if (playSine.getMicrosecondPosition() == 0) {
        testLabel.setIcon(image_base);
        return;
      }
      testLabel.setIcon(image_animated[count]);
      count++;
      if (count >= image_animated.length) {
        count = 0;
      }
    }
  };
}
