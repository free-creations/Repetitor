/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.free_creations.trainingdiary;

import de.free_creations.guicomponents.SongTopComponent;
import de.free_creations.midisong.SongSession;
import java.beans.PropertyChangeEvent;
import java.io.*;
import java.text.DateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//de.free_creations.trainingdiary//TrainingDiary//EN",
autostore = false)
@TopComponent.Description(preferredID = "TrainingDiaryTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(position=999, mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "de.free_creations.trainingdiary.TrainingDiaryTopComponent")
@ActionReference(path = "Menu/Window" /*
 * , position = 333
 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_TrainingDiaryAction",
preferredID = "TrainingDiaryTopComponent")
@Messages({
  "CTL_TrainingDiaryAction=TrainingDiary",
  "CTL_TrainingDiaryTopComponent=Training Diary",
  "HINT_TrainingDiaryTopComponent=See your training log"
})
public final class TrainingDiaryTopComponent extends SongTopComponent {

  static final private Logger logger = Logger.getLogger(TrainingDiaryTopComponent.class.getName());
  /**
   * This flag is set to true once todays date has been added to the diary.
   */
  private boolean dateAdded = false;

  public TrainingDiaryTopComponent() {
    initComponents();
    setName(Bundle.CTL_TrainingDiaryTopComponent());
    setToolTipText(Bundle.HINT_TrainingDiaryTopComponent());

  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setLayout(new java.awt.BorderLayout());

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText(org.openide.util.NbBundle.getMessage(TrainingDiaryTopComponent.class, "TrainingDiaryTopComponent.jTextArea1.text")); // NOI18N
        jScrollPane1.setViewportView(jTextArea1);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

  @Override
  public void componentOpened() {
    super.componentOpened();

  }

  @Override
  public boolean canClose() {
    return true;
  }

  @Override
  public void componentClosed() {
    super.componentClosed();
    
  }

  void writeProperties(java.util.Properties p) {
    // better to version settings since initial version as advocated at
    // http://wiki.apidesign.org/wiki/PropertyFiles
    p.setProperty("version", "1.0");
    try {
      // saving the content of jTextArea1.
      // We have to write to a file, trying to save
      // to a property would not work because the line feeds would be lost.
      FileObject fo = FileUtil.createData(FileUtil.getConfigRoot(), "TrainingDiary/data.txt");
      OutputStream saveStream = fo.getOutputStream();
      Writer out = new BufferedWriter(new OutputStreamWriter(saveStream));
      jTextArea1.write(out);
      saveStream.close();
    } catch (IOException ex) {
      logger.log(Level.WARNING, "could not save TrainingDiary", ex);
    }
  }

  void readProperties(java.util.Properties p) {
    String version = p.getProperty("version");
    FileObject fo = FileUtil.getConfigFile("TrainingDiary/data.txt");
    if (fo != null) {
      try {
        InputStream restoreStream = fo.getInputStream();
        Reader in = new BufferedReader(new InputStreamReader(restoreStream));
        jTextArea1.read(in, null);
        in.close();
      } catch (Exception ex) {
        logger.log(Level.WARNING, "could not restore TrainingDiary", ex);
      }
    }
  }

  @Override
  protected void songSessionChanged(SongSession oldSession, SongSession newSession) {
  }

  @Override
  protected void songPropertyChange(SongSession session, PropertyChangeEvent evt) {
    if (SongSession.PROP_PLAYING.equals(evt.getPropertyName())) {
      if (Boolean.TRUE.equals(evt.getNewValue())) {
        addEntry(session);
      }
    }
  }

  private void addEntry(SongSession session) {
    Date d = new Date();
    addDateEnty(d);
    String time = DateFormat.getTimeInstance(DateFormat.MEDIUM).format(d);
    String newEntry = String.format("   %s: %s at %.0f %% tempo.\n",
            time,
            session.getName(),
            100 * session.getTempoFactor());
    jTextArea1.append(newEntry);

  }

  private void addDateEnty(Date d) {
    if (dateAdded) {
      return;
    }
    jTextArea1.append("\n");
    jTextArea1.append("\n");
    jTextArea1.append(DateFormat.getDateInstance(DateFormat.FULL).format(d));
    jTextArea1.append("\n");
    dateAdded = true;

  }
}
