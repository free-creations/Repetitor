/*
 * Copyright 2012 Harald Postner.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package de.free_creations.conductor;

import de.free_creations.guicomponents.SongTopComponent;
import de.free_creations.guicomponents.SwingExecutor;
import de.free_creations.midisong.SongSession;
import java.beans.PropertyChangeEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays an animation that simulates the movements of a
 * conductor.
 */
//@ConvertAsProperties(dtd = "-//de.free_creations.conductor//Conductor//EN",
//autostore = false)
@TopComponent.Description(preferredID = "ConductorTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "conductor", openAtStartup = true)
@ActionID(category = "Window", id = "de.free_creations.conductor.ConductorTopComponent")
@ActionReference(path = "Menu/Window" /*
 * , position = 333
 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_ConductorAction",
preferredID = "ConductorTopComponent")
@Messages({
  "CTL_ConductorAction=Conductor",
  "CTL_ConductorTopComponent=Conductor Window",
  "HINT_ConductorTopComponent=Conductor window"
})
public final class ConductorTopComponent extends SongTopComponent {

  static final private Logger logger = Logger.getLogger(ConductorTopComponent.class.getName());
  private volatile SongSession activeSongSession = null;

  /**
   * This task reacts on changes of the tempo of the SongSession.
   */
  private final class TempoUpdater implements Runnable {

    private final double newTempo;

    public TempoUpdater(Object newTempo) {
      this.newTempo = (Double) newTempo;
    }

    @Override
    public void run() {
      logger.log(Level.FINER, "tempoSlider.setExptValue({0})", newTempo);
      tempoSlider.setExptValue(newTempo);
      tempoSpinner.setValue(new Double(newTempo));
    }
  }

  /**
   * This task reacts on changes of the playing status of the SongSession.
   */
  private final class PlayingUpdater implements Runnable {

    private final boolean newPlaying;
    private final SongSession session;

    public PlayingUpdater(SongSession session, Object newStatus) {
      this.newPlaying = (Boolean) newStatus;
      this.session = session;
    }

    @Override
    public void run() {
      // if we started to play, instruct the conductor panel
      if (newPlaying) {
        conductorPanel.sessionStarted(this.session);
      } else {
        conductorPanel.sessionStopped();
      }
    }
  }
  private final ConductorPanel conductorPanel;

  /**
   * The constructor of the ConductorTopComponent.
   */
  public ConductorTopComponent() {
    initComponents();
    setName(Bundle.CTL_ConductorTopComponent());
    setToolTipText(Bundle.HINT_ConductorTopComponent());
    conductorPanel = (ConductorPanel) castConductorPanel;
    setEnabledOnComponentAndChildren(this, false);
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        tempoSlider = new de.free_creations.guicomponents.TempoSlider();
        tempoSpinner = new de.free_creations.guicomponents.TempoSpinner();
        jLabel1 = new javax.swing.JLabel();
        castConductorPanel = new ConductorPanel();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(483, 40));

        tempoSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tempoSliderStateChanged(evt);
            }
        });

        tempoSpinner.setMinimumSize(new java.awt.Dimension(100, 28));
        tempoSpinner.setPreferredSize(new java.awt.Dimension(100, 28));
        tempoSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tempoSpinnerStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ConductorTopComponent.class, "ConductorTopComponent.jLabel1.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tempoSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tempoSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE)
                .addGap(12, 12, 12))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(tempoSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(tempoSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 6, Short.MAX_VALUE))
        );

        add(jPanel1, java.awt.BorderLayout.SOUTH);

        castConductorPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                castConductorPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout castConductorPanelLayout = new javax.swing.GroupLayout(castConductorPanel);
        castConductorPanel.setLayout(castConductorPanelLayout);
        castConductorPanelLayout.setHorizontalGroup(
            castConductorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 483, Short.MAX_VALUE)
        );
        castConductorPanelLayout.setVerticalGroup(
            castConductorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 260, Short.MAX_VALUE)
        );

        add(castConductorPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

  private void castConductorPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_castConductorPanelMouseClicked
  }//GEN-LAST:event_castConductorPanelMouseClicked

  private void tempoSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tempoSpinnerStateChanged
    if (activeSongSession != null) {
      activeSongSession.setTempoFactor((Double) tempoSpinner.getValue());
    }
  }//GEN-LAST:event_tempoSpinnerStateChanged

  private void tempoSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tempoSliderStateChanged
    if (activeSongSession != null) {
      activeSongSession.setTempoFactor(tempoSlider.getExptValue());
    }
  }//GEN-LAST:event_tempoSliderStateChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel castConductorPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private de.free_creations.guicomponents.TempoSlider tempoSlider;
    private de.free_creations.guicomponents.TempoSpinner tempoSpinner;
    // End of variables declaration//GEN-END:variables

  @Override
  public void componentOpened() {
    super.componentOpened();

  }

  @Override
  public void componentClosed() {
    super.componentClosed();
  }

  void readProperties(java.util.Properties p) {
    // do the read
  }

  void writeProperties(java.util.Properties p) {
    // handle the store
  }

  /**
   * Reacts when an other song becomes the active song. It is guaranteed that
   * this method is invoked in the AWT thread.
   *
   * @param oldSession the previous session or null
   * @param newSession the current session or null
   */
  @Override
  protected void songSessionChanged(SongSession oldSession, SongSession newSession) {
    logger.log(Level.FINER, "songSessionChanged(oldSession={0}, newSession={1})", new Object[]{oldSession, newSession});
    activeSongSession = newSession;
    if (newSession != null) {
      setEnabledOnComponentAndChildren(this, true);
      SwingExecutor.instance().execute(
              new PlayingUpdater(newSession, newSession.isPlaying()));
      logger.log(Level.FINER, "songSessionChanged(tempo of {0} is {1})", new Object[]{newSession, newSession.getTempoFactor()});
      SwingExecutor.instance().execute(
              new TempoUpdater(newSession.getTempoFactor()));
    } else {
      conductorPanel.sessionStopped();
      setEnabledOnComponentAndChildren(this, false);
    }

  }

  /**
   * Reacts when a property of the active song has changed. It is guaranteed
   * that this method is invoked in the AWT thread.
   *
   * @param session the currently active session (never null)
   * @param evt the property change event (never null)
   */
  @Override
  protected void songPropertyChange(SongSession session, PropertyChangeEvent evt) {
    if (SongSession.PROP_PLAYING.equals(evt.getPropertyName())) {
      SwingExecutor.instance().execute(
              new PlayingUpdater(session, evt.getNewValue()));
    } else if (SongSession.PROP_TEMPOFACTOR.equals(evt.getPropertyName())) {
      SwingExecutor.instance().execute(
              new TempoUpdater(evt.getNewValue()));
    }

  }
}
