/*
 * Copyright 2012 Harald Postner.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package de.free_creations.songview2;

import java.io.File;
import java.net.URL;
import javax.sound.midi.MidiSystem;
import javax.sound.midi.Sequence;
import javax.sound.midi.Track;
import org.openide.util.Exceptions;

/**
 *
 * @author Harald Postner
 */
public class TestJFrame extends javax.swing.JFrame {

  /**
   * Creates new form TestJFrame
   */
  public TestJFrame() {
    initComponents();


    File midiFileL = new File("/home/harald/NetBeansProjects/Repetitor/"
            + "SongView2/test/unit/src/de/free_creations/songview2/resources/choir2.mid");
    File midiFileS = new File("/home/harald/NetBeansProjects/Repetitor/"
            + "SongView2/test/unit/src/de/free_creations/songview2/resources/MissaAfricana_Kyrie.mid");
    try {
      Sequence sequence = MidiSystem.getSequence(midiFileL);
      Track[] tracks = new Track[4];
      tracks[0] = sequence.getTracks()[0];
      tracks[1] = sequence.getTracks()[1]; //S
      tracks[2] = sequence.getTracks()[2]; //A
      tracks[3] = sequence.getTracks()[3]; //T
      // tracks[4] = sequence.getTracks()[4]; //B

      songPanel.setRequiemTracks(tracks, sequence.getResolution(), null);
      //songPanel.setPixelToMidiFactor(30D);
      vertZoomSlider.setMinimum((int) (songPanel.getDefaultPixelToMidiFactor() / 5));
      vertZoomSlider.setMaximum((int) (songPanel.getDefaultPixelToMidiFactor() * 5));
      vertZoomSlider.setValue((int) (songPanel.getDefaultPixelToMidiFactor()));
      songPanel.setEnabled(1, true);
      jScrollBar.setModel(songPanel.getHorizontalScrollModel());

      cursorSlider.setMinimum((int) songPanel.getMinimumMidi());
      cursorSlider.setMaximum((int) songPanel.getMaximumMidi());
      startPointSlider.setMinimum((int) songPanel.getMinimumMidi());
      startPointSlider.setMaximum((int) songPanel.getMaximumMidi());

    } catch (Exception ex) {
      Exceptions.printStackTrace(ex);
    }
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    songPanel = new de.free_creations.songview2.SongPanel();
    jPanel1 = new javax.swing.JPanel();
    jScrollBar = new javax.swing.JScrollBar();
    cursorSlider = new javax.swing.JSlider();
    sliderLabel = new javax.swing.JLabel();
    startPointLabel = new javax.swing.JLabel();
    startPointSlider = new javax.swing.JSlider();
    vertZoomSlider = new javax.swing.JSlider();
    jLabel1 = new javax.swing.JLabel();
    cbTrack3 = new javax.swing.JCheckBox();
    loopActivateCheckBox = new javax.swing.JCheckBox();
    animatedCheckBox = new javax.swing.JCheckBox();
    horizZoomSlider = new javax.swing.JSlider();
    jLabel2 = new javax.swing.JLabel();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    getContentPane().setLayout(new java.awt.GridBagLayout());

    songPanel.setFont(songPanel.getFont().deriveFont(songPanel.getFont().getSize()+10f));

    javax.swing.GroupLayout songPanelLayout = new javax.swing.GroupLayout(songPanel);
    songPanel.setLayout(songPanelLayout);
    songPanelLayout.setHorizontalGroup(
      songPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 800, Short.MAX_VALUE)
    );
    songPanelLayout.setVerticalGroup(
      songPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 300, Short.MAX_VALUE)
    );

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    getContentPane().add(songPanel, gridBagConstraints);

    jPanel1.setPreferredSize(new java.awt.Dimension(200, 200));

    jScrollBar.setOrientation(javax.swing.JScrollBar.HORIZONTAL);

    cursorSlider.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        cursorSliderStateChanged(evt);
      }
    });

    sliderLabel.setText("Simulate cursor moves");

    startPointLabel.setText("Simulate Startpoint moves");

    startPointSlider.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        startPointSliderStateChanged(evt);
      }
    });

    vertZoomSlider.setMinimum(1);
    vertZoomSlider.setValue(30);
    vertZoomSlider.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        vertZoomSliderStateChanged(evt);
      }
    });

    jLabel1.setText(org.openide.util.NbBundle.getMessage(TestJFrame.class, "TestJFrame.jLabel1.text")); // NOI18N

    cbTrack3.setText(org.openide.util.NbBundle.getMessage(TestJFrame.class, "TestJFrame.cbTrack3.text")); // NOI18N
    cbTrack3.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cbTrack3ActionPerformed(evt);
      }
    });

    loopActivateCheckBox.setText(org.openide.util.NbBundle.getMessage(TestJFrame.class, "TestJFrame.loopActivateCheckBox.text")); // NOI18N
    loopActivateCheckBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        loopActivateCheckBoxActionPerformed(evt);
      }
    });

    animatedCheckBox.setText(org.openide.util.NbBundle.getMessage(TestJFrame.class, "TestJFrame.animatedCheckBox.text")); // NOI18N
    animatedCheckBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        animatedCheckBoxActionPerformed(evt);
      }
    });

    horizZoomSlider.setMaximum(400);
    horizZoomSlider.setMinimum(100);
    horizZoomSlider.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        horizZoomSliderStateChanged(evt);
      }
    });

    jLabel2.setText(org.openide.util.NbBundle.getMessage(TestJFrame.class, "TestJFrame.jLabel2.text")); // NOI18N

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jScrollBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .addComponent(cursorSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addComponent(sliderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(0, 0, Short.MAX_VALUE))
      .addComponent(startPointSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(startPointLabel)
          .addGroup(jPanel1Layout.createSequentialGroup()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
              .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(vertZoomSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
              .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(horizZoomSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGap(46, 46, 46)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(loopActivateCheckBox)
              .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(cbTrack3)
                .addGap(18, 18, 18)
                .addComponent(animatedCheckBox)))))
        .addContainerGap(179, Short.MAX_VALUE))
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jScrollBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(6, 6, 6)
        .addComponent(sliderLabel)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(cursorSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(startPointLabel)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(startPointSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jPanel1Layout.createSequentialGroup()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
              .addComponent(cbTrack3)
              .addComponent(animatedCheckBox))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(loopActivateCheckBox))
          .addGroup(jPanel1Layout.createSequentialGroup()
            .addComponent(vertZoomSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(horizZoomSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addGroup(jPanel1Layout.createSequentialGroup()
            .addComponent(jLabel1)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel2)))
        .addContainerGap(27, Short.MAX_VALUE))
    );

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    getContentPane().add(jPanel1, gridBagConstraints);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void cursorSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_cursorSliderStateChanged
    int sliderValue = cursorSlider.getValue();
    sliderLabel.setText("Simulate cursor moves: " + sliderValue);
    songPanel.setCursorVisible(sliderValue);
  }//GEN-LAST:event_cursorSliderStateChanged

  private void startPointSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_startPointSliderStateChanged
    int sliderValue = startPointSlider.getValue();
    startPointLabel.setText("Simulate Startpoint moves: " + sliderValue);
    songPanel.getDimensions().setStartPointMidi(sliderValue);
  }//GEN-LAST:event_startPointSliderStateChanged

  private void vertZoomSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_vertZoomSliderStateChanged
    songPanel.setPixelToMidiFactor(vertZoomSlider.getValue());

  }//GEN-LAST:event_vertZoomSliderStateChanged

  private void cbTrack3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTrack3ActionPerformed
    songPanel.setEnabled(2, cbTrack3.isSelected());
  }//GEN-LAST:event_cbTrack3ActionPerformed

  private void loopActivateCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loopActivateCheckBoxActionPerformed
    songPanel.setLoopActive(loopActivateCheckBox.isSelected());
  }//GEN-LAST:event_loopActivateCheckBoxActionPerformed

  private void animatedCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_animatedCheckBoxActionPerformed
    songPanel.setAnimated(animatedCheckBox.isSelected());
  }//GEN-LAST:event_animatedCheckBoxActionPerformed

  private void horizZoomSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_horizZoomSliderStateChanged
    songPanel.setVerticalZoom(horizZoomSlider.getValue() / 100D);
  }//GEN-LAST:event_horizZoomSliderStateChanged

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    /*
     * Set the Nimbus look and feel
     */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /*
     * If Nimbus (introduced in Java SE 6) is not available, stay with the
     * default look and feel. For details see
     * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(TestJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(TestJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(TestJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(TestJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /*
     * Create and display the form
     */
    java.awt.EventQueue.invokeLater(new Runnable() {

      @Override
      public void run() {
        new TestJFrame().setVisible(true);
      }
    });
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JCheckBox animatedCheckBox;
  private javax.swing.JCheckBox cbTrack3;
  private javax.swing.JSlider cursorSlider;
  private javax.swing.JSlider horizZoomSlider;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JScrollBar jScrollBar;
  private javax.swing.JCheckBox loopActivateCheckBox;
  private javax.swing.JLabel sliderLabel;
  private de.free_creations.songview2.SongPanel songPanel;
  private javax.swing.JLabel startPointLabel;
  private javax.swing.JSlider startPointSlider;
  private javax.swing.JSlider vertZoomSlider;
  // End of variables declaration//GEN-END:variables
}
